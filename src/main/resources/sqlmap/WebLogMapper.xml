<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zkyking.springaop.db.mapper.WebLogMapper">
    <resultMap id="BaseResultMap" type="com.zkyking.springaop.db.model.WebLog">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="operation_name" jdbcType="VARCHAR" property="operationName"/>
        <result column="request" jdbcType="VARCHAR" property="request"/>
        <result column="response" jdbcType="VARCHAR" property="response"/>
        <result column="error" jdbcType="TINYINT" property="error"/>
        <result column="taketime" jdbcType="BIGINT" property="taketime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zkyking.springaop.db.model.WebLog">
        <result column="stack" jdbcType="LONGVARCHAR" property="stack"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, operation_name, request, response, error, taketime, create_time
  </sql>
    <sql id="Blob_Column_List">
    stack
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.zkyking.springaop.db.example.WebLogExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.zkyking.springaop.db.example.WebLogExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from t_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_log
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from t_log
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.zkyking.springaop.db.example.WebLogExample">
        delete from t_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.zkyking.springaop.db.model.WebLog">
        insert into t_log (id, operation_name, request,
        response, error, taketime,
        create_time, stack)
        values (#{id,jdbcType=INTEGER}, #{operationName,jdbcType=VARCHAR}, #{request,jdbcType=VARCHAR},
        #{response,jdbcType=VARCHAR}, #{error,jdbcType=TINYINT}, #{taketime,jdbcType=BIGINT},
        #{createTime,jdbcType=TIMESTAMP}, #{stack,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.zkyking.springaop.db.model.WebLog">
        insert into t_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="operationName != null">
                operation_name,
            </if>
            <if test="request != null">
                request,
            </if>
            <if test="response != null">
                response,
            </if>
            <if test="error != null">
                error,
            </if>
            <if test="taketime != null">
                taketime,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="stack != null">
                stack,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="operationName != null">
                #{operationName,jdbcType=VARCHAR},
            </if>
            <if test="request != null">
                #{request,jdbcType=VARCHAR},
            </if>
            <if test="response != null">
                #{response,jdbcType=VARCHAR},
            </if>
            <if test="error != null">
                #{error,jdbcType=TINYINT},
            </if>
            <if test="taketime != null">
                #{taketime,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="stack != null">
                #{stack,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.zkyking.springaop.db.example.WebLogExample"
            resultType="java.lang.Long">
        select count(*) from t_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update t_log
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.operationName != null">
                operation_name = #{record.operationName,jdbcType=VARCHAR},
            </if>
            <if test="record.request != null">
                request = #{record.request,jdbcType=VARCHAR},
            </if>
            <if test="record.response != null">
                response = #{record.response,jdbcType=VARCHAR},
            </if>
            <if test="record.error != null">
                error = #{record.error,jdbcType=TINYINT},
            </if>
            <if test="record.taketime != null">
                taketime = #{record.taketime,jdbcType=BIGINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.stack != null">
                stack = #{record.stack,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update t_log
        set id = #{record.id,jdbcType=INTEGER},
        operation_name = #{record.operationName,jdbcType=VARCHAR},
        request = #{record.request,jdbcType=VARCHAR},
        response = #{record.response,jdbcType=VARCHAR},
        error = #{record.error,jdbcType=TINYINT},
        taketime = #{record.taketime,jdbcType=BIGINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        stack = #{record.stack,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_log
        set id = #{record.id,jdbcType=INTEGER},
        operation_name = #{record.operationName,jdbcType=VARCHAR},
        request = #{record.request,jdbcType=VARCHAR},
        response = #{record.response,jdbcType=VARCHAR},
        error = #{record.error,jdbcType=TINYINT},
        taketime = #{record.taketime,jdbcType=BIGINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.zkyking.springaop.db.model.WebLog">
        update t_log
        <set>
            <if test="operationName != null">
                operation_name = #{operationName,jdbcType=VARCHAR},
            </if>
            <if test="request != null">
                request = #{request,jdbcType=VARCHAR},
            </if>
            <if test="response != null">
                response = #{response,jdbcType=VARCHAR},
            </if>
            <if test="error != null">
                error = #{error,jdbcType=TINYINT},
            </if>
            <if test="taketime != null">
                taketime = #{taketime,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="stack != null">
                stack = #{stack,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zkyking.springaop.db.model.WebLog">
        update t_log
        set operation_name = #{operationName,jdbcType=VARCHAR},
        request = #{request,jdbcType=VARCHAR},
        response = #{response,jdbcType=VARCHAR},
        error = #{error,jdbcType=TINYINT},
        taketime = #{taketime,jdbcType=BIGINT},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        stack = #{stack,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zkyking.springaop.db.model.WebLog">
        update t_log
        set operation_name = #{operationName,jdbcType=VARCHAR},
        request = #{request,jdbcType=VARCHAR},
        response = #{response,jdbcType=VARCHAR},
        error = #{error,jdbcType=TINYINT},
        taketime = #{taketime,jdbcType=BIGINT},
        create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>